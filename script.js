// –ò–≥—Ä–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        let casinoBet = 100;
        const slotSymbols = ['üçí', 'üçã', 'üçä', '‚≠ê', '7Ô∏è‚É£', 'üí∞'];
        let isSpinning = false;
        let cosmicEnergy = 0;
        let totalEnergy = 0;
        let clickPower = 1;
        let totalClicks = 0;
        let prestigeLevel = 0;
        let prestigePoints = 0;
        let isMusicOn = false;

        // –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã
        const generators = [
            {
                id: 'star',
                name: '–ü–µ–π–¥–∂–µ—Ä',
                description: '–°–ª–∞–±—ã–π –ü–µ–π–¥–∂–µ—Ä, –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç 0.1 —ç–Ω–µ—Ä–≥–∏–∏ –≤ —Å–µ–∫—É–Ω–¥—É',
                baseCost: 10,
                baseProduction: 0.1,
                owned: 0,
                unlocked: true,
                icon: 'üìü'
            },
            {
                id: 'planet',
                name: '–¢–µ–ª–µ—Ñ–æ–Ω',
                description: '–°–µ–Ω—Å–æ—Ä–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω, –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç 0.5 —ç–Ω–µ—Ä–≥–∏–∏ –≤ —Å–µ–∫—É–Ω–¥—É',
                baseCost: 50,
                baseProduction: 0.5,
                owned: 0,
                unlocked: false,
                icon: 'üì±'
            },
            {
                id: 'nebula',
                name: '–ù–æ—É—Ç–±—É–∫',
                description: '–ù–æ—É—Ç–±—É–∫, –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç 2 —ç–Ω–µ—Ä–≥–∏–∏ –≤ —Å–µ–∫—É–Ω–¥—É',
                baseCost: 200,
                baseProduction: 2,
                owned: 0,
                unlocked: false,
                icon: 'üíª'
            },
            {
                id: 'blackhole',
                name: '–ö–æ–º–ø—å—é—Ç–µ—Ä',
                description: '–ú–æ—â–Ω—ã–π –∫–æ–º–ø—å—é—Ç–µ—Ä, –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç 10 —ç–Ω–µ—Ä–≥–∏–∏ –≤ —Å–µ–∫—É–Ω–¥—É',
                baseCost: 1000,
                baseProduction: 10,
                owned: 0,
                unlocked: false,
                icon: 'üñ•Ô∏è'
            },
            {
                id: 'galaxy',
                name: '–†–æ–±–æ—Ç',
                description: '–†–æ–±–æ—Ç, –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç 50 —ç–Ω–µ—Ä–≥–∏–∏ –≤ —Å–µ–∫—É–Ω–¥—É',
                baseCost: 5000,
                baseProduction: 50,
                owned: 0,
                unlocked: false,
                icon: 'ü§ñ'
            },
            {
                id: 'quasar',
                name: '–†–∞–∫–µ—Ç–∞',
                description: '–°–≤–µ—Ä—Ö–º–æ—â–Ω–∞—è —Ä–∞–∫–µ—Ç–∞, –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç 200 —ç–Ω–µ—Ä–≥–∏–∏ –≤ —Å–µ–∫—É–Ω–¥—É',
                baseCost: 20000,
                baseProduction: 200,
                owned: 0,
                unlocked: false,
                icon: 'üöÄ'
            },
            {
                id: 'cluster',
                name: '–ù–õ–û',
                description: '–¢–∞—Ä–µ–ª–∫–∞ –ù–õ–û, –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç 1000 —ç–Ω–µ—Ä–≥–∏–∏ –≤ —Å–µ–∫—É–Ω–¥—É',
                baseCost: 100000,
                baseProduction: 1000,
                owned: 0,
                unlocked: false,
                icon: 'üõ∏'
            },
            {
                id: 'universe',
                name: '–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç',
                description: '–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç, –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç 5000 —ç–Ω–µ—Ä–≥–∏–∏ –≤ —Å–µ–∫—É–Ω–¥—É',
                baseCost: 500000,
                baseProduction: 5000,
                owned: 0,
                unlocked: false,
                icon: 'üåå'
            }
        ];

        // –£–ª—É—á—à–µ–Ω–∏—è
        const upgrades = [
            {
                id: 'clickPower1',
                name: '–£—Å–∏–ª–µ–Ω–Ω—ã–π –∫–ª–∏–∫',
                description: '–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å–∏–ª—É –∫–ª–∏–∫–∞ –≤ 2 —Ä–∞–∑–∞',
                cost: 100,
                effect: () => { clickPower *= 2; },
                purchased: false,
                unlocked: true,
                icon: 'üí™'
            },
            {
                id: 'clickPower2',
                name: '–°—É–ø–µ—Ä –∫–ª–∏–∫',
                description: '–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å–∏–ª—É –∫–ª–∏–∫–∞ –≤ 3 —Ä–∞–∑–∞',
                cost: 1000,
                effect: () => { clickPower *= 3; },
                purchased: false,
                unlocked: false,
                icon: 'üí•'
            },
            {
                id: 'clickPower3',
                name: '–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –∫–ª–∏–∫',
                description: '–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å–∏–ª—É –∫–ª–∏–∫–∞ –≤ 5 —Ä–∞–∑',
                cost: 10000,
                effect: () => { clickPower *= 5; },
                purchased: false,
                unlocked: false,
                icon: 'üöÄ'
            },
            {
                id: 'generatorBoost1',
                name: '–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤',
                description: '–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –≤—Å–µ—Ö –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤ –Ω–∞ 20%',
                cost: 500,
                effect: () => { /* –≠—Ñ—Ñ–µ–∫—Ç –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ */ },
                purchased: false,
                unlocked: false,
                icon: 'üìà'
            },
            {
                id: 'generatorBoost2',
                name: '–°—É–ø–µ—Ä —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
                description: '–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –≤—Å–µ—Ö –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤ –Ω–∞ 50%',
                cost: 5000,
                effect: () => { /* –≠—Ñ—Ñ–µ–∫—Ç –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ */ },
                purchased: false,
                unlocked: false,
                icon: 'üìä'
            },
            {
                id: 'generatorBoost3',
                name: '–ö–≤–∞–Ω—Ç–æ–≤–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
                description: '–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –≤—Å–µ—Ö –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤ –Ω–∞ 100%',
                cost: 50000,
                effect: () => { /* –≠—Ñ—Ñ–µ–∫—Ç –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ */ },
                purchased: false,
                unlocked: false,
                icon: '‚öõÔ∏è'
            }
        ];

        // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        const achievements = [
            {
                id: 'firstClick',
                name: '–ü–µ—Ä–≤—ã–π —à–∞–≥',
                description: '–°–æ–≤–µ—Ä—à–∏—Ç–µ –ø–µ—Ä–≤—ã–π –∫–ª–∏–∫',
                condition: () => totalClicks >= 1,
                achieved: false,
                reward: 10,
                icon: 'üë£'
            },
            {
                id: 'hundredClicks',
                name: '–°—Ç–æ –∫–ª–∏–∫–æ–≤',
                description: '–°–æ–≤–µ—Ä—à–∏—Ç–µ 100 –∫–ª–∏–∫–æ–≤',
                condition: () => totalClicks >= 100,
                achieved: false,
                reward: 100,
                icon: 'üíØ'
            },
            {
                id: 'thousandClicks',
                name: '–¢—ã—Å—è—á–∞ –∫–ª–∏–∫–æ–≤',
                description: '–°–æ–≤–µ—Ä—à–∏—Ç–µ 1000 –∫–ª–∏–∫–æ–≤',
                condition: () => totalClicks >= 1000,
                achieved: false,
                reward: 1000,
                icon: 'üî¢'
            },
            {
                id: 'firstGenerator',
                name: '–ü–µ—Ä–≤—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä',
                description: '–ö—É–ø–∏—Ç–µ –ø–µ—Ä–≤—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä',
                condition: () => generators.some(g => g.owned > 0),
                achieved: false,
                reward: 50,
                icon: '‚≠ê'
            },
            {
                id: 'energy100',
                name: '100 —ç–Ω–µ—Ä–≥–∏–∏',
                description: '–°–æ–±–µ—Ä–∏—Ç–µ 100 —ç–Ω–µ—Ä–≥–∏–∏',
                condition: () => totalEnergy >= 100,
                achieved: false,
                reward: 100,
                icon: 'üîã'
            },
            {
                id: 'energy1000',
                name: '1000 —ç–Ω–µ—Ä–≥–∏–∏',
                description: '–°–æ–±–µ—Ä–∏—Ç–µ 1000 —ç–Ω–µ—Ä–≥–∏–∏',
                condition: () => totalEnergy >= 1000,
                achieved: false,
                reward: 1000,
                icon: '‚ö°'
            },
            {
                id: 'energy1e5',
                name: '100,000 —ç–Ω–µ—Ä–≥–∏–∏',
                description: '–°–æ–±–µ—Ä–∏—Ç–µ 100,000 —ç–Ω–µ—Ä–≥–∏–∏',
                condition: () => totalEnergy >= 1e5,
                achieved: false,
                reward: 10000,
                icon: 'üåå'
            },
            {
                id: 'energy1e6',
                name: '1,000,000 —ç–Ω–µ—Ä–≥–∏–∏',
                description: '–°–æ–±–µ—Ä–∏—Ç–µ 1,000,000 —ç–Ω–µ—Ä–≥–∏–∏',
                condition: () => totalEnergy >= 1e6,
                achieved: false,
                reward: 500000,
                icon: 'üåÄ'
            },
            {
                id: 'firstPrestige',
                name: '–ü–µ—Ä–≤—ã–π –ø—Ä–µ—Å—Ç–∏–∂',
                description: '–°–æ–≤–µ—Ä—à–∏—Ç–µ –ø–µ—Ä–≤—ã–π –ø—Ä–µ—Å—Ç–∏–∂',
                condition: () => prestigeLevel >= 1,
                achieved: false,
                reward: 1000,
                icon: 'üîÑ'
            }
        ];
        // DOM —ç–ª–µ–º–µ–Ω—Ç—ã
        const cosmicEnergyElement = document.getElementById('cosmicEnergy');
        const clickPowerElement = document.getElementById('clickPower');
        const clickerBtn = document.getElementById('clickerBtn');
        const totalClicksElement = document.getElementById('totalClicks');
        const energyPerSecondElement = document.getElementById('energyPerSecond');
        const totalEnergyElement = document.getElementById('totalEnergy');
        const prestigeLevelElement = document.getElementById('prestigeLevel');
        const prestigeBtn = document.getElementById('prestigeBtn');
        const generatorsTab = document.getElementById('generatorsTab');
        const upgradesTab = document.getElementById('upgradesTab');
        const achievementsTab = document.getElementById('achievementsTab');
        const achievementNotification = document.getElementById('achievementNotification');
        const achievementTitle = document.getElementById('achievementTitle');
        const achievementDesc = document.getElementById('achievementDesc');
        const bgMusic = document.getElementById('bgMusic');
        const musicToggle = document.getElementById('musicToggle');

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞–≥–∞–∑–∏–Ω–∞
        function initShop() {
            // –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã
            generatorsTab.innerHTML = '';
            generators.filter(g => g.unlocked).forEach(generator => {
                const cost = Math.floor(generator.baseCost * Math.pow(1.15, generator.owned));

                const generatorElement = document.createElement('div');
                generatorElement.className = 'shop-item';
                generatorElement.innerHTML = `
                    <div class="item-icon">${generator.icon}</div>
                    <div class="item-info">
                        <h4 class="item-name">${generator.name}</h4>
                        <p class="item-description">${generator.description}</p>
                        <p class="item-price">${formatNumber(cost)} —ç–Ω–µ—Ä–≥–∏–∏</p>
                    </div>
                    <button class="buy-btn" data-id="${generator.id}">–ö—É–ø–∏—Ç—å (${generator.owned})</button>
                `;
                generatorsTab.appendChild(generatorElement);
            });

            // –£–ª—É—á—à–µ–Ω–∏—è
            upgradesTab.innerHTML = '';
            upgrades.filter(u => u.unlocked && !u.purchased).forEach(upgrade => {
                const upgradeElement = document.createElement('div');
                upgradeElement.className = 'shop-item';
                upgradeElement.innerHTML = `
                    <div class="item-icon">${upgrade.icon}</div>
                    <div class="item-info">
                        <h4 class="item-name">${upgrade.name}</h4>
                        <p class="item-description">${upgrade.description}</p>
                        <p class="item-price">${formatNumber(upgrade.cost)} —ç–Ω–µ—Ä–≥–∏–∏</p>
                    </div>
                    <button class="buy-btn" data-id="${upgrade.id}">–ö—É–ø–∏—Ç—å</button>
                `;
                upgradesTab.appendChild(upgradeElement);
            });

            // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            achievementsTab.innerHTML = '';
            achievements.forEach(achievement => {
                const achievementElement = document.createElement('div');
                achievementElement.className = 'shop-item';
                achievementElement.innerHTML = `
                    <div class="item-icon">${achievement.icon}</div>
                    <div class="item-info">
                        <h4 class="item-name">${achievement.name} ${achievement.achieved ? '‚úì' : ''}</h4>
                        <p class="item-description">${achievement.description}</p>
                        <p class="item-price">–ù–∞–≥—Ä–∞–¥–∞: ${formatNumber(achievement.reward)} —ç–Ω–µ—Ä–≥–∏–∏</p>
                    </div>
                `;
                achievementsTab.appendChild(achievementElement);
            });

        // ss
        clickerBtn.addEventListener('touchstart', (e) => {
            e.preventDefault();
            clickerBtn.classList.add('active');
            
            // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ –∫–ª–∏–∫–∞
            const clickSound = document.getElementById('clickSound');
            clickSound.currentTime = 0;
            clickSound.play();
        
            cosmicEnergy += clickPower;
            totalEnergy += clickPower;
            totalClicks++;
            checkAchievements();
            updateUI();
        });
        
        clickerBtn.addEventListener('touchend', () => {
            clickerBtn.classList.remove('active');
        });
        
        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –º–µ–Ω—é –ø—Ä–∏ –¥–æ–ª–≥–æ–º –Ω–∞–∂–∞—Ç–∏–∏
        clickerBtn.addEventListener('contextmenu', (e) => {
            e.preventDefault();
        });
                
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø–æ–∫—É–ø–∫–∏
            document.querySelectorAll('#generatorsTab .buy-btn').forEach(btn => {
                btn.addEventListener('click', () => buyGenerator(btn.dataset.id));
            });

            document.querySelectorAll('#upgradesTab .buy-btn').forEach(btn => {
                btn.addEventListener('click', () => buyUpgrade(btn.dataset.id));
            });
        }
//sss

        function toggleMusic() {
            isMusicOn = !isMusicOn;

            if (isMusicOn) {
                bgMusic.volume = 0.2; // –û—á–µ–Ω—å —Ç–∏—Ö–∏–π –∑–≤—É–∫ (20% –≥—Ä–æ–º–∫–æ—Å—Ç–∏)
                bgMusic.play().catch(e => console.log("Autoplay prevented:", e));
                musicToggle.textContent = "üîä";
            } else {
                bgMusic.pause();
                musicToggle.textContent = "üîá";
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
            localStorage.setItem('musicEnabled', isMusicOn);
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º—É–∑—ã–∫–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
        function initMusic() {
            const savedSetting = localStorage.getItem('musicEnabled');
            if (savedSetting !== null) {
                isMusicOn = savedSetting === 'true';
            } else {
                // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –º—É–∑—ã–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞
                isMusicOn = false;
            }

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∫–æ–Ω–∫—É
            musicToggle.textContent = isMusicOn ? "üîä" : "üîá";

            // –ï—Å–ª–∏ –º—É–∑—ã–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞ - –∑–∞–ø—É—Å–∫–∞–µ–º
            if (isMusicOn) {
                bgMusic.volume = 0.2;
                // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ–±—Ö–æ–¥–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –∞–≤—Ç–æ–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
                setTimeout(() => {
                    bgMusic.play().catch(e => console.log("Autoplay prevented:", e));
                }, 1000);
            }

            // –í–µ—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            musicToggle.addEventListener('click', toggleMusic);
        }

        // –ü–æ–∫—É–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
        function buyGenerator(id) {
            const generator = generators.find(g => g.id === id);
            if (!generator) return;

            const cost = Math.floor(generator.baseCost * Math.pow(1.15, generator.owned));
            const buyBtn = document.querySelector(`.buy-btn[data-id="${id}"]`);

            if (cosmicEnergy >= cost) {
                // –£—Å–ø–µ—à–Ω–∞—è –ø–æ–∫—É–ø–∫–∞
                cosmicEnergy -= cost;
                generator.owned++;
                document.getElementById('buySound').play();

                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∏–ª—å –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –±—ã–ª
                buyBtn.classList.remove('error', 'error-pulse');

                // –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
                if (generator.owned >= 5 && generators.indexOf(generator) < generators.length - 1) {
                    const nextGenerator = generators[generators.indexOf(generator) + 1];
                    nextGenerator.unlocked = true;
                }

                updateUI();
                initShop();
                checkAchievements();
            } else {
                // –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç —ç–Ω–µ—Ä–≥–∏–∏
                document.getElementById('errorSound').play();

                // –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∞—Å–Ω—ã–π —Å—Ç–∏–ª—å –∏ –ø—É–ª—å—Å–∞—Ü–∏—é
                buyBtn.classList.add('error', 'error-pulse');

                // –£–±–∏—Ä–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ 0.5 —Å–µ–∫—É–Ω–¥—ã, –æ—Å—Ç–∞–≤–ª—è—è –∫—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç
                setTimeout(() => {
                    buyBtn.classList.remove('error-pulse');
                }, 500);
            }
        }

        // –ü–æ–∫—É–ø–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è
        function buyUpgrade(id) {
            const upgrade = upgrades.find(u => u.id === id);
            if (!upgrade || upgrade.purchased || cosmicEnergy < upgrade.cost) {
                // –ï—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —ç–Ω–µ—Ä–≥–∏–∏ - –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º –∑–≤—É–∫ –æ—à–∏–±–∫–∏ –∏ –º–∏–≥–∞–µ–º
                if (cosmicEnergy < upgrade.cost) {
                    document.getElementById('errorSound').play();
                    const buyBtn = document.querySelector(`.buy-btn[data-id="${id}"]`);
                    if (buyBtn) {
                        buyBtn.classList.add('error', 'error-flash');
                        setTimeout(() => buyBtn.classList.remove('error-flash'), 300);
                    }
                }
                return;
            }

            // –£—Å–ø–µ—à–Ω–∞—è –ø–æ–∫—É–ø–∫–∞
            cosmicEnergy -= upgrade.cost;
            upgrade.purchased = true;
            upgrade.effect();
            document.getElementById('buySound').play();

            // –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–ª–µ–¥—É—é—â–∏—Ö —É–ª—É—á—à–µ–Ω–∏–π (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞)
            if (upgrade.id === 'clickPower1') {
                upgrades.find(u => u.id === 'clickPower2').unlocked = true;
                upgrades.find(u => u.id === 'generatorBoost1').unlocked = true;
            } else if (upgrade.id === 'clickPower2') {
                upgrades.find(u => u.id === 'clickPower3').unlocked = true;
            } else if (upgrade.id === 'generatorBoost1') {
                upgrades.find(u => u.id === 'generatorBoost2').unlocked = true;
            } else if (upgrade.id === 'generatorBoost2') {
                upgrades.find(u => u.id === 'generatorBoost3').unlocked = true;
            }

            updateUI();
            initShop();
            checkAchievements();
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        function checkAchievements() {
            achievements.forEach(achievement => {
                if (!achievement.achieved && achievement.condition()) {
                    achievement.achieved = true;
                    cosmicEnergy += achievement.reward;
                    showAchievementNotification(achievement);
                }
            });

            initShop();
        }

        // –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏
        function showAchievementNotification(achievement) {
            achievementTitle.textContent = achievement.name;
            achievementDesc.textContent = achievement.description;

            // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            const achievementSound = document.getElementById('achievementSound');
            achievementSound.currentTime = 0; // –ü–µ—Ä–µ–º–∞—Ç—ã–≤–∞–µ–º –Ω–∞ –Ω–∞—á–∞–ª–æ, –µ—Å–ª–∏ –∑–≤—É–∫ —É–∂–µ –∏–≥—Ä–∞–ª
            achievementSound.play();

            achievementNotification.classList.add('show');

            setTimeout(() => {
                achievementNotification.classList.remove('show');
            }, 5000);
        }

        // –ü—Ä–µ—Å—Ç–∏–∂
        function prestige() {
            if (cosmicEnergy < 1e8) return;

            prestigeLevel++;
            prestigePoints += Math.floor(Math.sqrt(cosmicEnergy / 1e8));

            // –°–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            cosmicEnergy = 0;
            clickPower = 1 + prestigeLevel * 0.5;
            totalEnergy = 0;
            totalClicks = 0;

            generators.forEach(g => {
                g.owned = 0;
                g.unlocked = g.id === 'star';
            });

            upgrades.forEach(u => {
                u.purchased = false;
                u.unlocked = u.id === 'clickPower1';
            });

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            achievements.forEach(a => {
                if (a.id === 'firstPrestige') a.achieved = prestigeLevel >= 1;
            });

            updateUI();
            initShop();
            checkAchievements();
        }

        // –†–∞—Å—á–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ —ç–Ω–µ—Ä–≥–∏–∏ –≤ —Å–µ–∫—É–Ω–¥—É
        function calculateEnergyPerSecond() {
            let production = 0;

            generators.forEach(generator => {
                let generatorProduction = generator.baseProduction * generator.owned;

                // –ü—Ä–∏–º–µ–Ω—è–µ–º —É–ª—É—á—à–µ–Ω–∏—è
                if (upgrades.find(u => u.id === 'generatorBoost1')?.purchased) {
                    generatorProduction *= 1.2;
                }
                if (upgrades.find(u => u.id === 'generatorBoost2')?.purchased) {
                    generatorProduction *= 1.5;
                }
                if (upgrades.find(u => u.id === 'generatorBoost3')?.purchased) {
                    generatorProduction *= 2;
                }

                production += generatorProduction;
            });

            return production;
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        function updateUI() {
            cosmicEnergyElement.textContent = formatNumber(cosmicEnergy);
            clickPowerElement.textContent = formatNumber(clickPower);
            totalClicksElement.textContent = formatNumber(totalClicks);

            const eps = calculateEnergyPerSecond();
            energyPerSecondElement.textContent = formatNumber(eps);

            totalEnergyElement.textContent = formatNumber(totalEnergy);
            prestigeLevelElement.textContent = prestigeLevel;

            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –ø—Ä–µ—Å—Ç–∏–∂–∞
            prestigeBtn.textContent = `–ü–†–ï–°–¢–ò–ñ (${formatNumber(cosmicEnergy)}/${formatNumber(1e8)})`;
            prestigeBtn.disabled = cosmicEnergy < 1e8;

            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–µ—Å—Ç–∏–∂–∞
            document.querySelector('.prestige-info').textContent =
                `–ü—Ä–µ—Å—Ç–∏–∂ —Å–±—Ä–æ—Å–∏—Ç –≤–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å, –Ω–æ –¥–∞—Å—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –±–æ–Ω—É—Å: +${prestigeLevel * 0.5} –∫ —Å–∏–ª–µ –∫–ª–∏–∫–∞!`;
        }

        // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª
        function formatNumber(num) {
            if (num < 1000) return Math.floor(num);
            if (num < 1e6) return (num / 1000).toFixed(1) + 'K';
            if (num < 1e9) return (num / 1e6).toFixed(1) + 'M';
            if (num < 1e12) return (num / 1e9).toFixed(1) + 'B';
            return (num / 1e12).toFixed(1) + 'T';
        }

        // –°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Å—Ç–∏—Ü
        function createParticles() {
            const particlesContainer = document.getElementById('particles');
            const particleCount = 50;

            for (let i = 0; i < particleCount; i++) {
                const particle = document.createElement('div');
                particle.className = 'particle';

                // –°–ª—É—á–∞–π–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
                const size = Math.random() * 3 + 1;
                const posX = Math.random() * 100;
                const posY = Math.random() * 100;
                const delay = Math.random() * 20;
                const duration = 30 + Math.random() * 50;
                const opacity = 0.2 + Math.random() * 0.5;

                // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π
                particle.style.width = `${size}px`;
                particle.style.height = `${size}px`;
                particle.style.left = `${posX}%`;
                particle.style.top = `${posY}%`;
                particle.style.opacity = opacity;
                particle.style.animation = `float ${duration}s linear ${delay}s infinite`;

                // –¶–≤–µ—Ç–∞ —á–∞—Å—Ç–∏—Ü
                const colors = ['#6e45e2', '#89d4cf', '#f9d423', '#ffffff'];
                particle.style.backgroundColor = colors[Math.floor(Math.random() * colors.length)];

                particlesContainer.appendChild(particle);
            }
        }

        // –ò–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
        function gameLoop() {
            const eps = calculateEnergyPerSecond();
            cosmicEnergy += eps / 10; // –û–±–Ω–æ–≤–ª—è–µ–º 10 —Ä–∞–∑ –≤ —Å–µ–∫—É–Ω–¥—É
            totalEnergy += eps / 10;

            updateUI();
            requestAnimationFrame(gameLoop);
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
        function initGame() {
            // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            initMusic();
            const save = localStorage.getItem('cosmicClickerSave');
            if (save) {
                const parsed = JSON.parse(save);
                cosmicEnergy = parsed.cosmicEnergy || 0;
                totalEnergy = parsed.totalEnergy || 0;
                clickPower = parsed.clickPower || 1;
                totalClicks = parsed.totalClicks || 0;
                prestigeLevel = parsed.prestigeLevel || 0;
                prestigePoints = parsed.prestigePoints || 0;

                if (parsed.generators) {
                    generators.forEach(g => {
                        const savedGen = parsed.generators.find(sg => sg.id === g.id);
                        if (savedGen) {
                            g.owned = savedGen.owned || 0;
                            g.unlocked = savedGen.unlocked || false;
                        }
                    });
                }

                if (parsed.upgrades) {
                    upgrades.forEach(u => {
                        const savedUp = parsed.upgrades.find(su => su.id === u.id);
                        if (savedUp) {
                            u.purchased = savedUp.purchased || false;
                            u.unlocked = savedUp.unlocked || false;
                        }
                    });
                }

                if (parsed.achievements) {
                    achievements.forEach(a => {
                        const savedAch = parsed.achievements.find(sa => sa.id === a.id);
                        if (savedAch) {
                            a.achieved = savedAch.achieved || false;
                        }
                    });
                }
            }

            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            clickerBtn.addEventListener('click', () => {
                // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ –∫–ª–∏–∫–∞
                const clickSound = document.getElementById('clickSound');
                clickSound.currentTime = 0; // –ü–µ—Ä–µ–º–∞—Ç—ã–≤–∞–µ–º –Ω–∞ –Ω–∞—á–∞–ª–æ, –µ—Å–ª–∏ –∑–≤—É–∫ —É–∂–µ –∏–≥—Ä–∞–ª
                clickSound.play();

                cosmicEnergy += clickPower;
                totalEnergy += clickPower;
                totalClicks++;
                checkAchievements();
                updateUI();

                // –≠—Ñ—Ñ–µ–∫—Ç —á–∞—Å—Ç–∏—Ü—ã (–æ—Å—Ç–∞–≤–ª—è–µ–º –≤–∞—à —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥)
                const clickEffect = document.createElement('div');
                clickEffect.className = 'particle';
                clickEffect.style.width = '10px';
                clickEffect.style.height = '10px';
                clickEffect.style.left = `${Math.random() * 80 + 10}%`;
                clickEffect.style.top = `${Math.random() * 80 + 10}%`;
                clickEffect.style.opacity = '0.5';
                clickEffect.style.animation = 'float 2s linear forwards';
                clickEffect.style.backgroundColor = '#ea92c6';
                document.getElementById('particles').appendChild(clickEffect);

                setTimeout(() => {
                    clickEffect.remove();
                }, 2000);
            });

            prestigeBtn.addEventListener('click', prestige);

            // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫ –º–∞–≥–∞–∑–∏–Ω–∞
            document.querySelectorAll('.shop-tab').forEach(tab => {
                tab.addEventListener('click', () => {
                    // –ï—Å–ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞ - –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
                    if (tab.classList.contains('active')) return;

                    // –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â—É—é –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É
                    const currentActiveTab = document.querySelector('.shop-tab.active');
                    const currentActiveContent = document.querySelector('.shop-tab-content.active');

                    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏
                    const currentIndex = Array.from(document.querySelectorAll('.shop-tab')).indexOf(currentActiveTab);
                    const newIndex = Array.from(document.querySelectorAll('.shop-tab')).indexOf(tab);
                    const direction = newIndex > currentIndex ? 'right' : 'left';

                    // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å —Ç–µ–∫—É—â–µ–π –≤–∫–ª–∞–¥–∫–∏ –∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                    currentActiveTab.classList.remove('active');
                    currentActiveContent.classList.remove('active');

                    // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –≤—ã—Ö–æ–¥–∞
                    currentActiveContent.style.transform = direction === 'right' ? 'translateX(-20px)' : 'translateX(20px)';
                    currentActiveContent.style.opacity = '0';

                    // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å –∫ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ
                    tab.classList.add('active');
                    const newContent = document.getElementById(`${tab.dataset.tab}Tab`);
                    newContent.classList.add('active');

                    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –≤—Ö–æ–¥–∞
                    newContent.style.transform = direction === 'right' ? 'translateX(20px)' : 'translateX(-20px)';
                    newContent.style.opacity = '0';

                    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –≤—Ö–æ–¥–∞ –ø–æ—Å–ª–µ –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
                    setTimeout(() => {
                        newContent.style.transform = 'translateX(0)';
                        newContent.style.opacity = '1';
                    }, 10);
                });
            });

            // –°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Å—Ç–∏—Ü
            createParticles();

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞–≥–∞–∑–∏–Ω–∞
            initShop();
            updateUI();
            checkAchievements();

            // –ó–∞–ø—É—Å–∫ –∏–≥—Ä–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞
            gameLoop();

            // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
            setInterval(saveGame, 30000);
        }

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–≥—Ä—ã
        function saveGame() {
            const save = {
                cosmicEnergy,
                totalEnergy,
                clickPower,
                totalClicks,
                prestigeLevel,
                prestigePoints,
                generators: generators.map(g => ({
                    id: g.id,
                    owned: g.owned,
                    unlocked: g.unlocked
                })),
                upgrades: upgrades.map(u => ({
                    id: u.id,
                    purchased: u.purchased,
                    unlocked: u.unlocked
                })),
                achievements: achievements.map(a => ({
                    id: a.id,
                    achieved: a.achieved
                }))
            };

            localStorage.setItem('cosmicClickerSave', JSON.stringify(save));
        }

        // –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        window.addEventListener('load', initGame);s
